//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	void print(String s)
	{
		System.out.println("\t"+s);
	}
	void print2(String s)
	{
		System.out.print("\t"+s);
	}
	void print3(String s)
	{
		System.out.print(s);
	}
	String indextoreg(int index)
  {
  	if(index<4)
  	{
  		return "a"+(index);
  	}
    else if(index<12)
    {
      return "t"+(index-4);
    }
    else if(index<20)
    {
      return "s"+(index-12);
    }
    else if(index<22)
    {
    	return "t"+(index-12);
    }
    else
    {
    	return "v"+(index-22);
    }
  }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ) {
      	 print3((String)n.node.accept(this,argu)+":\n");
         return n.node.accept(this,argu);
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> VariablePackingInfo()
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("\t.text\n\t.globl main\nmain:");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String y = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String x = (String)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      int a = Integer.parseInt(x);
      int b = Integer.parseInt(y);
      int temp;
      if(a>4)
      	temp = 4*(a+b-2);
      else
      	temp = (b+2)*4;
      print("move $fp, $sp\n\tsubu $sp, $sp, "+temp+" \n\tsw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      print("lw $ra, -4($fp)\n\taddu $sp, $sp, "+temp);
      print("jr $ra\n");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      System.out.println("\t.text\n\t.globl _halloc\n_halloc:\n\tli $v0, 9\n\tsyscall\n\tjr $ra\n");
      System.out.println("\t.text\n\t.globl _print\n_print:\n\tli $v0, 1\n\tsyscall\n\tla $a0, newl\n\tli $v0, 4\n\tsyscall\n\tjr $ra\n");
      System.out.println("\t.data\n\t.align 0\nnewl:\t.asciiz \"\\n\"\n\t.data\n\t.align 0");
      System.out.println("str_er:\t.asciiz \" ERROR: abnormal termination\\n\"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String procname = (String)n.f0.accept(this, argu);
      System.out.println("\t.text\n\t.globl "+procname+"\n"+procname+":");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String y = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String x = (String)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      int a = Integer.parseInt(x);
      int b = Integer.parseInt(y);
      int temp;
      if(a>4)
      	temp = 4*(a+b-2);
      else
      	temp = (b+2)*4;
      print("sw $fp, -8($sp)\n\tmove $fp, $sp\n\tsubu $sp, $sp, "+temp+"\n\tsw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      print("lw $ra, -4($fp)\n\tlw $fp, "+(temp-8)+"($sp)\n\taddu $sp, $sp, "+temp);
      print("jr $ra\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      print("li $v0, 4");
      print("la $a0, str_er\n\tsyscall");
      print("li $v0, 10\n\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      print("beqz "+(String)n.f1.accept(this,argu)+ " "+(String)n.f2.accept(this,argu));
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      print("b "+(String)n.f1.accept(this,argu));
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      print("sw "+(String)n.f3.accept(this, argu)+", "+(String)n.f2.accept(this, argu)+"("+(String)n.f1.accept(this, argu)+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      print("lw "+(String)n.f1.accept(this, argu)+", "+(String)n.f3.accept(this, argu)+"("+(String)n.f2.accept(this, argu)+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      Exp choicemove = n.f2;
      if(choicemove.f0.which==0) {
      	choicemove.accept(this,argu);
      	print("move "+(String)n.f1.accept(this,argu)+" $v0");
      }
      else if(choicemove.f0.which==2) {
      	SimpleExp intorreg = (SimpleExp)choicemove.f0.choice;
      	if(intorreg.f0.which==0) {
      	print("move "+(String)n.f1.accept(this,argu)+" "+(String)intorreg.f0.accept(this, argu));
	      }
	    else if(intorreg.f0.which==1) {
	    print("li "+(String)n.f1.accept(this,argu)+" "+(String)intorreg.f0.accept(this, argu));
	    }
	    else if(intorreg.f0.which==2) {
	    print("la "+(String)n.f1.accept(this,argu)+" "+(String)intorreg.f0.accept(this, argu));
	    }
      }
      else {
      	  BinOp opstmt = (BinOp)choicemove.f0.choice;
	      SimpleExp intorreg = (SimpleExp)opstmt.f2;
	      Operator op = (Operator)opstmt.f0;
	      int whichop = op.f0.which;
		  int whichintreg = intorreg.f0.which;
	      switch(whichop) {
	      	case 0: 
	      			switch(whichintreg) {
	      				case 0: print("slt "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("slti "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 1:
	      			switch(whichintreg) {
	      				case 0: print("addu "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("addu "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 2:
	      			switch(whichintreg) {
	      				case 0: print("subu "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("subu "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 3:
	      			switch(whichintreg) {
	      				case 0: print("mult "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						print("mflo "+(String)n.f1.accept(this,argu));
	      						break;
	      				case 1: 
	      						print("li $v1 "+(String)intorreg.f0.accept(this, argu));
	      						print("mult "
	      						+(String)opstmt.f1.accept(this, argu)+", $v1");
	      						print("mflo "+(String)n.f1.accept(this,argu));
	      			}
	      			break;
	      	case 4:
	      			switch(whichintreg) {
	      				case 0: print("div "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						print("mflo "+(String)n.f1.accept(this,argu));
	      						break;
	      				case 1: print("li $v1 "+(String)intorreg.f0.accept(this, argu));
	      						print("div "
	      						+(String)opstmt.f1.accept(this, argu)+", $v1");
	      						print("mflo "+(String)n.f1.accept(this,argu));
	      			}
	      			break;
	      	case 5: 
	      			switch(whichintreg) {
	      				case 0: print("or "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("ori "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 6: 
	      			switch(whichintreg) {
	      				case 0: print("and "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("and "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 7: 
	      			switch(whichintreg) {
	      				case 0: print("sllv "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("sll "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 8: 
	      			switch(whichintreg) {
	      				case 0: print("srlv "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("srl "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      	case 9: 
	      			switch(whichintreg) {
	      				case 0: print("xor "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      						break;
	      				case 1: print("xori "+(String)n.f1.accept(this,argu)+", "
	      						+(String)opstmt.f1.accept(this, argu)+", "+(String)intorreg.f0.accept(this, argu));
	      			}
	      			break;
	      }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      SimpleExp intorreg = n.f1;
      if(intorreg.f0.which==0) {
      	print("move $a0 "+(String)n.f1.accept(this, argu));
      }
      else if(intorreg.f0.which==1) {
      	print("li $a0 "+(String)n.f1.accept(this, argu));
      }
      print("jal _print");
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      int val = Integer.parseInt((String)n.f2.accept(this, argu));
      print("lw "+(String)n.f1.accept(this, argu)+", "+(val*(-4)+(-12))+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      int val = Integer.parseInt((String)n.f1.accept(this, argu));
      print("sw "+(String)n.f2.accept(this, argu)+", "+(val*(-4)+(-12))+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int x = Integer.parseInt((String)n.f1.accept(this, argu));
      print("sw "+(String)n.f2.accept(this, argu)+", "+(x*(-4)-8)+"($sp)");
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      SimpleExp checkr = n.f1;
      if(checkr.f0.which==0) {
      	print2("jalr ");
      }
      else if(checkr.f0.which==2) {
      	print2("jal ");
      }
      print3((String)n.f1.accept(this, argu));
      n.f0.accept(this, argu);
      print(" ");
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      SimpleExp intorreg = n.f1;
      if(intorreg.f0.which==0) {
      	print("move $a0 "+(String)n.f1.accept(this, argu));
      }
      else if(intorreg.f0.which==1) {
      	print("li $a0 "+(String)n.f1.accept(this, argu));
      }
      print("jal _halloc");
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    *       | "BITOR"
    *       | "BITAND"
    *       | "LSHIFT"
    *       | "RSHIFT"
    *       | "BITXOR"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String regs = indextoreg(n.f0.which);
      //System.out.print("$"+regs+" ");
      _ret = (R)("$"+regs);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "// Number of  vars after packing ="
    * f1 -> IntegerLiteral()
    * f2 -> "; Number of Spilled vars ="
    * f3 -> IntegerLiteral()
    */
   public R visit(VariablePackingInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

}

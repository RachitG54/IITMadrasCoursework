//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap< String, HashMap<String, String> > vartypedataclass = new HashMap<String, HashMap<String, String> >();
   HashMap< String, ArrayList<String> > vartypedatafunc = new HashMap< String, ArrayList<String> >();
   HashMap<String,String> H1 =new HashMap<String,String>();
   HashMap<String,String> funcreturn =new HashMap<String,String>();
   HashMap<String,String> classextend =new HashMap<String,String>();
   HashMap<String,String> funcfind =new HashMap<String,String>();
   ArrayList<String> argname = new ArrayList<String>();
   ArrayList<String> argtype = new ArrayList<String>();
   HashMap<String,String> typenames =new HashMap<String,String>();
   int parsecount = 0;
   String currentclass = null;
   String currentfunc = null;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println("Parsecount is "+ parsecount);
      if(parsecount>0)
      {
      	System.out.println("Program type checked successfully");
      }
   	  parsecount++;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      typenames.put("int","1");
      typenames.put("boolean","1");
      typenames.put("intarray","1");
      R _ret=null;
      n.f0.accept(this, argu);
      String x = (String)(n.f1.accept(this, argu));
      currentclass = x;
      if(parsecount==0)
      {
        if(typenames.get(currentclass)==null)
          typenames.put(currentclass,"1");
        else
        {
            System.out.println("Type error");
           System.exit(0);
        }
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      currentfunc = "main";
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      x = (String)(n.f11.accept(this, argu));
      funcfind.put(x,"String");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      funcfind.remove(x);
      currentfunc = null;
      n.f16.accept(this, argu);
      currentclass = null;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String x = (String)(n.f1.accept(this, argu));
      currentclass = x;
      if(parsecount==0)
      {
        if(typenames.get(currentclass)==null)
          typenames.put(currentclass,"1");
        else
        {
            System.out.println("Type error");
           System.exit(0);
        }
      }
      H1 = new HashMap<String,String>();
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      vartypedataclass.put(currentclass,H1);
      currentclass = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String x = (String)(n.f1.accept(this, argu));
      currentclass = x;
      if(parsecount==0)
      {
        if(typenames.get(currentclass)==null)
          typenames.put(currentclass,"1");
        else
        {
            System.out.println("Type error");
           System.exit(0);
        }
      }
      n.f2.accept(this, argu);
      x = (String)(n.f3.accept(this, argu));
      if(parsecount==0)
      {
        if(classextend.get(currentclass)==null)
          classextend.put(currentclass,x);
        else
        {
            System.out.println("Type error");
           System.exit(0);
        }
      }
      if(parsecount>0)
      {
        if(typenames.get(x)==null)
        {
           System.out.println("Type error");
           System.exit(0);
        }
      }
      n.f4.accept(this, argu);
      H1 = new HashMap<String,String>();
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      vartypedataclass.put(currentclass,H1);
      currentclass = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String y = (String)(n.f0.accept(this, argu));
      String x = (String)(n.f1.accept(this, argu));
      if(currentfunc==null)
      {
      	if(H1.get(x)==null)	
      	H1.put(x,y);
        else
        {
          System.out.println("Type error");
           System.exit(0);
        }
        
      }
      else
      {
        if(funcfind.get(x)==null)
      	{
          funcfind.put(x,y);
        }
        else
        {
          System.out.println("Type error");
           System.exit(0);
        }
      }
      /*if(parsecount>0)
        {
                String doesextend = classextend.get(currentclass);
                while(doesextend!=null)
                {
                  HashMap<String,String> htempextend = vartypedataclass.get(doesextend);
                  String z = htempextend.get(x);
                  if(z!=null)
                  {
                    System.out.println("Program type checked successfully");
                    System.exit(0);
                  }
                  else
                  {
                    doesextend = classextend.get(doesextend);
                    //System.out.println(doesextend);
                  }
                }
        }*/
      n.f2.accept(this, argu);
      if(parsecount>0)
      {
        if(typenames.get(y)==null)
        {
           System.out.println("Type error");
           System.exit(0);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String type = (String)(n.f1.accept(this, argu));
      if(parsecount>0)
      {
        if(typenames.get(type)==null)
        {
           System.out.println("Type error");
           System.exit(0);
        }
      }
      String name = (String)(n.f2.accept(this, argu));
      currentfunc = name;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String retname = (String)(n.f10.accept(this, argu));
      String fullname = currentclass+":"+currentfunc;
      if(parsecount==0)
      {
        if(funcreturn.get(fullname)==null)
          funcreturn.put(fullname,type);
        else
        {
          System.out.println("Type error");
          System.exit(0);
        }

      }
      //System.out.println("class name is "+ fullname+ " freturntype is "+type);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      currentfunc = null;
      funcfind.clear();
      if(parsecount>0)
      {
      	if(!(type.equals(retname)))
      	{
      		int flag = -1;
            String typeclass = (String)(retname);
            String tempret = (String)(type);
            if(!(tempret.equals(typeclass)))
            {
              String doesextend = classextend.get(typeclass);
              while(doesextend!=null)
              {
                if(tempret.equals(doesextend))
                {
                  flag = 1;
                  break;
                }
                else
                {
                  doesextend = classextend.get(doesextend);
                }
              }
              if(flag==-1)
              {
              System.out.println("Type error");
              System.exit(0);
              }
              else
              {
                _ret = null;
              }
            }
      	}
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tempfname = currentclass+":"+currentfunc;
      vartypedatafunc.put(tempfname,argtype);
      for(int i=0;i<argname.size();i++)
      {
      	String tempname = argname.get(i);
      	String temptype = argtype.get(i);
      	funcfind.put(tempname,temptype);
      }
      argname.clear();
      argtype.clear();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String y = (String)(n.f0.accept(this, argu));
      String x = (String)(n.f1.accept(this, argu));
      argname.add(x);
      argtype.add(y);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = (R)(String)(n.f0.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)(String)("intarray");
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)(String)("boolean");
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)(String)("int");
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y2 = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      if(parsecount>0)
  	    {
  	    	if(funcfind.get(x)!=null)
  	        {
  	        	_ret = (R)(String)(funcfind.get(x));
  	        }
  	        else
  	        {
  	        	HashMap<String,String> htemp = vartypedataclass.get(currentclass);
  	        	String y = htemp.get(x);
  	        	if(y!=null)
  	        	{
  	        		//System.out.println(y);
  	        		_ret = (R)y;
  	        	}
  	        	else
  	        	{
  	        		String doesextend = classextend.get(currentclass);
  	        		while(doesextend!=null)
  	        		{
  	        			HashMap<String,String> htempextend = vartypedataclass.get(doesextend);
  	        			y = htempextend.get(x);
  	        			if(y!=null)
		  	        	{
		  	        		//System.out.println(y);
		  	        		_ret = (R)y;
		  	        		break;
		  	        	}
		  	        	else
		  	        	{
		  	        		doesextend = classextend.get(doesextend);
		  	        		//System.out.println(doesextend);
		  	        	}
  	        		}
  	        		if(_ret==null)
  	        		{
  	        			System.out.println("Type error");
	      	 			System.exit(0);
  	        		}
  	        	}
  	        }
  	        int flag = -1;
  	        String typeclass = (String)(y2);
            String tempret = (String)(_ret);
   	        if(!(tempret.equals(typeclass)))
  	        {
  	        	String doesextend = classextend.get(typeclass);
  	        	while(doesextend!=null)
  	        	{
  	        		if(tempret.equals(doesextend))
  	        		{
  	        			flag = 1;
  	        			break;
  	        		}
  	        		else
  	        		{
  	        			doesextend = classextend.get(doesextend);
  	        		}
  	        	}
  	        	if(flag==-1)
  	        	{
  	        	System.out.println("Type error");
	      	 	  System.exit(0);
	      	 	  }
              else
              {
                _ret = null;
              }
  	        }
  	        else
  	        {
  	        	_ret = null;
  	        }
  	    }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String z1 = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String z2 = (String)(n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      if(parsecount>0)
  	    {
  	    	if(funcfind.get(x)!=null)
  	        {
  	        	_ret = (R)(String)(funcfind.get(x));
  	        }
  	        else
  	        {
  	        	HashMap<String,String> htemp = vartypedataclass.get(currentclass);
  	        	String y = htemp.get(x);
  	        	if(y!=null)
  	        	{
  	        		_ret = (R)y;
  	        	}
  	        	else
  	        	{
  	        		String doesextend = classextend.get(currentclass);
  	        		while(doesextend!=null)
  	        		{
  	        			HashMap<String,String> htempextend = vartypedataclass.get(doesextend);
  	        			y = htempextend.get(x);
  	        			if(y!=null)
		  	        	{
		  	        		_ret = (R)y;
		  	        		break;
		  	        	}
		  	        	else
		  	        	{
		  	        		//System.out.println(doesextend);
		  	        		doesextend = classextend.get(doesextend);
		  	        	}
  	        		}
  	        		if(_ret==null)
  	        		{
  	        			System.out.println("Type error");
	      	 			  System.exit(0);
  	        		}
  	        	}
  	        }
  	        String y2 = (String)(_ret);
   	        if(!(y2.equals("intarray")&&z2.equals("int")&&z1.equals("int")))
  	        {
  	        	System.out.println("Type error");
	      	 	  System.exit(0);
  	        }
  	        else
  	        {
  	        	_ret = null;
  	        }
  	    }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String x = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(parsecount>0)
      {
      	if(!x.equals("boolean"))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String x = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(parsecount>0)
      {
      	if(!x.equals("boolean"))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String x = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(parsecount>0)
      {
      	if(!x.equals("boolean"))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String x = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(parsecount>0)
      {
        if(!(x.equals("int")))
        {
          System.out.println("Type error");
          System.exit(0);
        }
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = (R)(String)(n.f0.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("boolean") && y.equals("boolean")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("boolean");	
      }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("boolean") && y.equals("boolean")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("boolean");	
      }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("int") && y.equals("int")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("boolean");	
      }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!((x.equals("int") && y.equals("int"))||(x.equals("boolean") && y.equals("boolean"))))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("boolean");	
      }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("int") && y.equals("int")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("int");	
      }
      _ret = (R)("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("int") && y.equals("int")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("int");	
      }
      _ret = (R)("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("int") && y.equals("int")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("int");	
      }
      _ret = (R)("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      if(parsecount>0)
      {
      	if(!(x.equals("int") && y.equals("int")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("int");	
      }
      _ret = (R)("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String y = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      if(parsecount>0)
      {
      	//System.out.println(x+y+currentclass+":"+currentfunc);
      	if(!(x.equals("intarray") && y.equals("int")))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
      	_ret = (R)("int");	
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(parsecount>0)
      {
      	if(!x.equals("intarray"))
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}
        _ret = (R)("int");	
      }
      _ret = (R)("int");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String cname = (String)(n.f0.accept(this, argu));
      n.f1.accept(this, argu);
      String fname = (String)(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      if(parsecount>0)
      {
      	String newname = cname+":"+fname;
      	ArrayList args = vartypedatafunc.get(newname);
      	if((args==null)&&(argtype==null))
      	{
      		_ret = (R)(funcreturn.get(newname));	
      	}
      	else if(argtype.size()==0)
      	{
      		if(args==null)
      		_ret = (R)(funcreturn.get(newname));
      		else
      		{
      			System.out.println("Type error");
		    	System.exit(0);	
      		}
      	}
      	/*else if(args==null)
      	{
      		System.out.println(newname+"Type error26");
	      	System.exit(0);
      	}*/
      	/*else if(args.size()!=argtype.size())
      	{
      		System.out.println("Type error");
	      	System.exit(0);
      	}*/
      	else if(args==null)
      	{
      		String doesextend = classextend.get(cname);
  	        while(doesextend!=null)
  	        {
  	        			newname = doesextend + ":" + fname;
  	        	        args = vartypedatafunc.get(newname);
  	        			if(args!=null)
		  	        	{
                    if(argtype.size()!=args.size())
                    {
                      System.out.println("Type error");
                          System.exit(0);
                    }
		  	        		for(int i=0;i<argtype.size();i++)
  					      	{
  					      		//System.out.println("args is"+args.get(0));
  					      		if(!((args.get(i)).equals(argtype.get(i))))
  					      		{
  					      			int flag = -1;
                        String typeclass = (String)(argtype.get(i));
                        String tempret = (String)(args.get(i));
                        if(!(tempret.equals(typeclass)))
                        {
                          String doesextend2 = classextend.get(typeclass);
                          while(doesextend2!=null)
                          {
                            if(tempret.equals(doesextend2))
                            {
                              flag = 1;
                              break;
                            }
                            else
                            {
                              doesextend2 = classextend.get(doesextend2);
                            }
                          }
                          if(flag==-1)
                          {
                          System.out.println("Type error");
                          System.exit(0);
                          }
                          else
                          {
                            _ret = null;
                          }
                        }
  					      		}
  					      	}
		  	        		break;
		  	        	}
		  	        	else
		  	        	{
		  	        		doesextend = classextend.get(doesextend);
		  	        	}
  	        }
  	        if(args==null)
  	        {
  	        	System.out.println("Type error");
	      		System.exit(0);
  	        }
      	}
      	else
      	{
          if(argtype.size()!=args.size())
            {
              System.out.println("Type error");
              System.exit(0);
            }
      		//System.out.println("args is"+currentclass+currentfunc+newname+ args.size());
	      	for(int i=0;i<argtype.size();i++)
	      	{
	      		//System.out.println("args is"+args.get(0));
            
	      		if(!((args.get(i)).equals(argtype.get(i))))
	      		{
	      			int flag = -1;
              String typeclass = (String)(argtype.get(i));
              String tempret = (String)(args.get(i));
              if(!(tempret.equals(typeclass)))
              {
                String doesextend = classextend.get(typeclass);
                while(doesextend!=null)
                {
                  if(tempret.equals(doesextend))
                  {
                    flag = 1;
                    break;
                  }
                  else
                  {
                    doesextend = classextend.get(doesextend);
                  }
                }
                if(flag==-1)
                {
                System.out.println("Type error");
                System.exit(0);
                }
                else
                {
                  _ret = null;
                }
              }
	      		}
	      	}
	    }
        _ret = (R)(funcreturn.get(newname));
        if(parsecount>0)
        {
          if(_ret == null)
          {
          	System.out.println("Type error");
  	      	System.exit(0);
          }
        }
      }
      argtype.clear();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String x = (String)(n.f0.accept(this, argu));
      argtype.add(x);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String x = (String)(n.f1.accept(this, argu));
      argtype.add(x);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      if(n.f0.which!=3)
      _ret = (R)(String)(n.f0.accept(this, argu));
  	  else
  	  {
  	  	_ret = (R)(String)(n.f0.accept(this, argu));
  	  	String x = (String)_ret;
  	  	if(parsecount>0)
  	    {
  	    	
  	    	if(funcfind.get(x)!=null)
  	        {
  	        	_ret = (R)(String)(funcfind.get(x));
  	        	//System.out.println("Returned type is" + (String)(_ret));
  	        }
  	        else
  	        {
  	        	HashMap<String,String> htemp = vartypedataclass.get(currentclass);

  	        	String y = htemp.get(x);
  	        	if(y!=null)
  	        	{

  	        		_ret = (R)y;
  	        	}
  	        	else
  	        	{
  	        		String doesextend = classextend.get(currentclass);
  	        		while(doesextend!=null)
  	        		{
  	        			HashMap<String,String> htempextend = vartypedataclass.get(doesextend);
  	        			y = htempextend.get(x);
  	        			if(y!=null)
		  	        	{
		  	        		_ret = (R)y;
		  	        		break;
		  	        	}
		  	        	else
		  	        	{
		  	        		//System.out.println(doesextend);
		  	        		doesextend = classextend.get(doesextend);
		  	        	}
  	        		}
  	        		if(_ret==null)
  	        		{
  	        			System.out.println("Type error");
	      	 			System.exit(0);
  	        		}
  	        	}
  	        	//System.out.println("Returned type is" + (String)(_ret));
  	        }
  	    }
  	    else
  	    {
  	    	_ret = null;
  	    }
  	  }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)("int");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret=(R)(String)(n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)(currentclass);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String x = (String)(n.f3.accept(this, argu));
      n.f4.accept(this, argu);
      if(parsecount>0)
      {
	      if(x.equals("int"))
	      {
	     	_ret = (R)("intarray");
	      }
	      else
	      {
	      	System.out.println("Type error");
	      	System.exit(0);
	      }
	  }
      _ret = (R)("intarray");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)(String)(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String x = (String)(n.f1.accept(this, argu));
      if(parsecount>0)
      {
	      if(x==null)
	      {
	      	 System.out.println("Type error");
	      	 System.exit(0);
	      }
	      else
	      {
	      	if(x.equals("boolean"))
	      	{
	      		_ret = (R)("boolean");
	      	}
	      	else
	      	{
	      	  System.out.println("Type error");
	      	  System.exit(0);
	      	}
	      }
	  }
      _ret = (R)("boolean");
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)(String)(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
